// Decipher Technology Studios, LLC (“Decipher”) owns all right, title to and interest in the Grey Matter software (the “Software”).
// Use of and access to the Software is governed by the Decipher Technology Studios End User License Agreement (the “EULA”).

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	installv1 "github.com/bcmendoza/gm-operator/apis/install/v1"
	versioned "github.com/bcmendoza/gm-operator/client/clientset/versioned"
	internalinterfaces "github.com/bcmendoza/gm-operator/client/informers/externalversions/internalinterfaces"
	v1 "github.com/bcmendoza/gm-operator/client/listers/install/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// OperatorInformer provides access to a shared informer and lister for
// Operators.
type OperatorInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.OperatorLister
}

type operatorInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewOperatorInformer constructs a new informer for Operator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewOperatorInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredOperatorInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredOperatorInformer constructs a new informer for Operator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredOperatorInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.InstallV1().Operators(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.InstallV1().Operators(namespace).Watch(context.TODO(), options)
			},
		},
		&installv1.Operator{},
		resyncPeriod,
		indexers,
	)
}

func (f *operatorInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredOperatorInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *operatorInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&installv1.Operator{}, f.defaultInformer)
}

func (f *operatorInformer) Lister() v1.OperatorLister {
	return v1.NewOperatorLister(f.Informer().GetIndexer())
}
