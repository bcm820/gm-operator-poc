// Decipher Technology Studios, LLC (“Decipher”) owns all right, title to and interest in the Grey Matter software (the “Software”).
// Use of and access to the Software is governed by the Decipher Technology Studios End User License Agreement (the “EULA”).

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	operatorv1 "github.com/bcmendoza/gm-operator/apis/operator/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMeshes implements MeshInterface
type FakeMeshes struct {
	Fake *FakeOperatorV1
	ns   string
}

var meshesResource = schema.GroupVersionResource{Group: "operator.greymatter.io", Version: "v1", Resource: "meshes"}

var meshesKind = schema.GroupVersionKind{Group: "operator.greymatter.io", Version: "v1", Kind: "Mesh"}

// Get takes name of the mesh, and returns the corresponding mesh object, and an error if there is any.
func (c *FakeMeshes) Get(ctx context.Context, name string, options v1.GetOptions) (result *operatorv1.Mesh, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(meshesResource, c.ns, name), &operatorv1.Mesh{})

	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.Mesh), err
}

// List takes label and field selectors, and returns the list of Meshes that match those selectors.
func (c *FakeMeshes) List(ctx context.Context, opts v1.ListOptions) (result *operatorv1.MeshList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(meshesResource, meshesKind, c.ns, opts), &operatorv1.MeshList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &operatorv1.MeshList{ListMeta: obj.(*operatorv1.MeshList).ListMeta}
	for _, item := range obj.(*operatorv1.MeshList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested meshes.
func (c *FakeMeshes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(meshesResource, c.ns, opts))

}

// Create takes the representation of a mesh and creates it.  Returns the server's representation of the mesh, and an error, if there is any.
func (c *FakeMeshes) Create(ctx context.Context, mesh *operatorv1.Mesh, opts v1.CreateOptions) (result *operatorv1.Mesh, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(meshesResource, c.ns, mesh), &operatorv1.Mesh{})

	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.Mesh), err
}

// Update takes the representation of a mesh and updates it. Returns the server's representation of the mesh, and an error, if there is any.
func (c *FakeMeshes) Update(ctx context.Context, mesh *operatorv1.Mesh, opts v1.UpdateOptions) (result *operatorv1.Mesh, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(meshesResource, c.ns, mesh), &operatorv1.Mesh{})

	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.Mesh), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeMeshes) UpdateStatus(ctx context.Context, mesh *operatorv1.Mesh, opts v1.UpdateOptions) (*operatorv1.Mesh, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(meshesResource, "status", c.ns, mesh), &operatorv1.Mesh{})

	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.Mesh), err
}

// Delete takes name of the mesh and deletes it. Returns an error if one occurs.
func (c *FakeMeshes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(meshesResource, c.ns, name), &operatorv1.Mesh{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMeshes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(meshesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &operatorv1.MeshList{})
	return err
}

// Patch applies the patch and returns the patched mesh.
func (c *FakeMeshes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *operatorv1.Mesh, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(meshesResource, c.ns, name, pt, data, subresources...), &operatorv1.Mesh{})

	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.Mesh), err
}
