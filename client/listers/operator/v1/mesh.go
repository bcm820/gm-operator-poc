// Decipher Technology Studios, LLC (“Decipher”) owns all right, title to and interest in the Grey Matter software (the “Software”).
// Use of and access to the Software is governed by the Decipher Technology Studios End User License Agreement (the “EULA”).

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/bcmendoza/gm-operator/apis/operator/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeshLister helps list Meshes.
// All objects returned here must be treated as read-only.
type MeshLister interface {
	// List lists all Meshes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Mesh, err error)
	// Meshes returns an object that can list and get Meshes.
	Meshes(namespace string) MeshNamespaceLister
	MeshListerExpansion
}

// meshLister implements the MeshLister interface.
type meshLister struct {
	indexer cache.Indexer
}

// NewMeshLister returns a new MeshLister.
func NewMeshLister(indexer cache.Indexer) MeshLister {
	return &meshLister{indexer: indexer}
}

// List lists all Meshes in the indexer.
func (s *meshLister) List(selector labels.Selector) (ret []*v1.Mesh, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Mesh))
	})
	return ret, err
}

// Meshes returns an object that can list and get Meshes.
func (s *meshLister) Meshes(namespace string) MeshNamespaceLister {
	return meshNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeshNamespaceLister helps list and get Meshes.
// All objects returned here must be treated as read-only.
type MeshNamespaceLister interface {
	// List lists all Meshes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Mesh, err error)
	// Get retrieves the Mesh from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Mesh, error)
	MeshNamespaceListerExpansion
}

// meshNamespaceLister implements the MeshNamespaceLister
// interface.
type meshNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Meshes in the indexer for a given namespace.
func (s meshNamespaceLister) List(selector labels.Selector) (ret []*v1.Mesh, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Mesh))
	})
	return ret, err
}

// Get retrieves the Mesh from the indexer for a given namespace and name.
func (s meshNamespaceLister) Get(name string) (*v1.Mesh, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mesh"), name)
	}
	return obj.(*v1.Mesh), nil
}
