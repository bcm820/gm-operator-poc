// Decipher Technology Studios, LLC (“Decipher”) owns all right, title to and interest in the Grey Matter software (the “Software”).
// Use of and access to the Software is governed by the Decipher Technology Studios End User License Agreement (the “EULA”).

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/bcmendoza/gm-operator/apis/install/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OperatorLister helps list Operators.
// All objects returned here must be treated as read-only.
type OperatorLister interface {
	// List lists all Operators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Operator, err error)
	// Operators returns an object that can list and get Operators.
	Operators(namespace string) OperatorNamespaceLister
	OperatorListerExpansion
}

// operatorLister implements the OperatorLister interface.
type operatorLister struct {
	indexer cache.Indexer
}

// NewOperatorLister returns a new OperatorLister.
func NewOperatorLister(indexer cache.Indexer) OperatorLister {
	return &operatorLister{indexer: indexer}
}

// List lists all Operators in the indexer.
func (s *operatorLister) List(selector labels.Selector) (ret []*v1.Operator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Operator))
	})
	return ret, err
}

// Operators returns an object that can list and get Operators.
func (s *operatorLister) Operators(namespace string) OperatorNamespaceLister {
	return operatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OperatorNamespaceLister helps list and get Operators.
// All objects returned here must be treated as read-only.
type OperatorNamespaceLister interface {
	// List lists all Operators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Operator, err error)
	// Get retrieves the Operator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Operator, error)
	OperatorNamespaceListerExpansion
}

// operatorNamespaceLister implements the OperatorNamespaceLister
// interface.
type operatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Operators in the indexer for a given namespace.
func (s operatorNamespaceLister) List(selector labels.Selector) (ret []*v1.Operator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Operator))
	})
	return ret, err
}

// Get retrieves the Operator from the indexer for a given namespace and name.
func (s operatorNamespaceLister) Get(name string) (*v1.Operator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("operator"), name)
	}
	return obj.(*v1.Operator), nil
}
